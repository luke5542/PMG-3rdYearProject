
//---------------------------------------------------------
// Shader:   HotShower.glsl      Created by kali 9/2013
// original: https://www.shadertoy.com/view/4lf3Rj
// tags:     planet, 3d, raymarching, noise
//---------------------------------------------------------
#ifdef GL_ES
  precision highp float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;
uniform sampler2D texture;

//---------------------------------------------------------
// rendering params
const float sphsize = 0.7; // planet size
const float dist = 0.27; // distance for glow and distortion
const float perturb = 0.3; // distortion amount of the flow around the planet
const float displacement = 0.015; // hot air effect
const float windspeed = 0.4; // speed of wind flow
const float steps = 110.0; // number of steps for the volumetric rendering
const float stepsize = 0.025;
const float brightness = 0.43;
const vec3 planetcolor = vec3(0.55,0.4,0.3);
const float fade = 0.005; //fade by distance
const float glow = 3.5; // glow amount, mainly on hit side

// fractal params
const int iterations = 13;
const float fractparam = 0.7;
const vec3 offset = vec3(1.5,2.,-1.5);

float wind(vec3 p)
{
    float d = max(0.,dist-max(0.,length(p)-sphsize)/sphsize)/dist;  // for distortion and glow area
    float x = max(0.2,p.x*2.);  // to increase glow on left side
    p.y *= 1.+max(0.,-p.x-sphsize*.25)*1.5;  // left side distortion (cheesy)
    p -= d*normalize(p)*perturb;  // spheric distortion of flow
    p += vec3(time*windspeed,0.,0.);  // flow movement
    p = abs(fract((p+offset)*.1)-.5);  // tile folding
    for (int i=0; i<iterations; i++)
        p = abs(p)/dot(p,p)-fractparam;  // the magic formula for the hot flow
    return length(p)*(1.+d*glow*x)+d*glow*x;  // return the result with glow applied
}

void main(void)
{
    // get ray dir
    vec2 uv = gl_FragCoord.xy / resolution.xy-.5;
    vec3 dir = vec3(uv,1.);
    dir.x *= resolution.x / resolution.y;
    vec2 tc = uv*.5 + time;
    vec3 from = vec3(0.,0.,-2.+texture2D(texture, tc).x*stepsize);  //from+dither

    // volumetric rendering
    float v=0., l=-0.0001, t=time*windspeed*.2;
    for (float r=10.;r<steps;r++)
    {
        vec3 p = from+r*dir*stepsize;
        tc = mod(uv*.2+vec2(t,0.),1.0);
        float tx = texture2D(texture, tc).x * displacement;  // hot air effect
        if (length(p)-sphsize-tx>0.)
            // outside planet, accumulate values as ray goes, applying distance fading
            v += min(50.,wind(p))*max(0.,1.-r*fade);
        else if (l < 0.0)
        {
            //inside planet, get planet shading if not already
            //loop continues because of previous problems with breaks and not always optimizes much
            tc = mod(uv*vec2(2.,1.)*(1.+p.z*.5)+vec2(tx+t*.5,0.0), 1.0);
            l = pow(max(.53,dot(normalize(p),normalize(vec3(-1.,.5,-0.3)))),4.)
                *(0.5+texture2D(texture,tc).x*2.0);
        }
    }
    v /= steps;   v *= brightness;   // average values and apply bright factor
    vec3 col = vec3(v*1.25,v*v,v*v*v)+l*planetcolor;   // set color
    col *= 1.-length(pow(abs(uv),vec2(5.)))*14.;   // vignette (kind of)
    gl_FragColor = vec4(col,1.0);
}
